// Generated by ReScript, PLEASE EDIT WITH CARE

import * as List from "rescript/lib/es6/list.js";
import * as Curry from "rescript/lib/es6/curry.js";
import * as Stream from "rescript/lib/es6/stream.js";
import * as $$String from "rescript/lib/es6/string.js";
import * as Caml_obj from "rescript/lib/es6/caml_obj.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Caml_string from "rescript/lib/es6/caml_string.js";
import * as CamlinternalLazy from "rescript/lib/es6/camlinternalLazy.js";
import * as Caml_js_exceptions from "rescript/lib/es6/caml_js_exceptions.js";

function of_stream(stream) {
  var next = function (stream) {
    try {
      return /* Cons */{
              _0: Stream.next(stream),
              _1: {
                LAZY_DONE: false,
                VAL: (function () {
                    return next(stream);
                  })
              }
            };
    }
    catch (raw_exn){
      var exn = Caml_js_exceptions.internalToOCamlException(raw_exn);
      if (exn.RE_EXN_ID === Stream.Failure) {
        return /* Nil */0;
      }
      throw exn;
    }
  };
  return next(stream);
}

function of_function(f) {
  var next = function (f) {
    var x = Curry._1(f, undefined);
    if (x !== undefined) {
      return /* Cons */{
              _0: Caml_option.valFromOption(x),
              _1: {
                LAZY_DONE: false,
                VAL: (function () {
                    return next(f);
                  })
              }
            };
    } else {
      return /* Nil */0;
    }
  };
  return next(f);
}

function of_string(str) {
  return of_stream(Stream.of_string(str));
}

function of_channel(ic) {
  return of_stream(Stream.of_channel(ic));
}

var LazyStream = {
  of_stream: of_stream,
  of_function: of_function,
  of_string: of_string,
  of_channel: of_channel
};

function implode(l) {
  return $$String.concat("", List.map((function (param) {
                    return $$String.make(1, param);
                  }), l));
}

function explode(s) {
  var l = {
    contents: /* [] */0
  };
  $$String.iter((function (c) {
          l.contents = {
            hd: c,
            tl: l.contents
          };
          
        }), s);
  return List.rev(l.contents);
}

function $percent(f, g, x) {
  return Curry._1(g, Curry._1(f, x));
}

function parse(parser, input) {
  var match = Curry._1(parser, input);
  if (match !== undefined) {
    return Caml_option.some(match[0]);
  }
  
}

function $$return(x, input) {
  return [
          x,
          input
        ];
}

function $great$great$eq(x, f, input) {
  var match = Curry._1(x, input);
  if (match !== undefined) {
    return Curry._2(f, match[0], match[1]);
  }
  
}

function $less$pipe$great(x, y, input) {
  var ret = Curry._1(x, input);
  if (ret !== undefined) {
    return ret;
  } else {
    return Curry._1(y, input);
  }
}

function scan(x, input) {
  var match = Curry._1(x, input);
  if (match === undefined) {
    return /* Nil */0;
  }
  var input$p = match[1];
  return /* Cons */{
          _0: match[0],
          _1: {
            LAZY_DONE: false,
            VAL: (function () {
                return scan(x, input$p);
              })
          }
        };
}

function mzero(param) {
  
}

function any(param) {
  if (param) {
    return [
            param._0,
            CamlinternalLazy.force(param._1)
          ];
  }
  
}

function satisfy(test) {
  return function (param) {
    return $great$great$eq(any, (function (res) {
                  if (Curry._1(test, res)) {
                    return function (param) {
                      return [
                              res,
                              param
                            ];
                    };
                  } else {
                    return mzero;
                  }
                }), param);
  };
}

function eof(x, param) {
  if (param) {
    return ;
  } else {
    return [
            x,
            /* Nil */0
          ];
  }
}

function $eq$great(x, f) {
  return function (param) {
    return $great$great$eq(x, (function (r) {
                  var partial_arg = Curry._1(f, r);
                  return function (param) {
                    return [
                            partial_arg,
                            param
                          ];
                  };
                }), param);
  };
}

function $great$great(x, y) {
  return function (param) {
    return $great$great$eq(x, (function (param) {
                  return y;
                }), param);
  };
}

function $less$less(x, y) {
  return function (param) {
    return $great$great$eq(x, (function (r) {
                  return function (param) {
                    return $great$great$eq(y, (function (param) {
                                  return function (param) {
                                    return [
                                            r,
                                            param
                                          ];
                                  };
                                }), param);
                  };
                }), param);
  };
}

function $less$tilde$great(x, xs) {
  return function (param) {
    return $great$great$eq(x, (function (r) {
                  return function (param) {
                    return $great$great$eq(xs, (function (rs) {
                                  var partial_arg = {
                                    hd: r,
                                    tl: rs
                                  };
                                  return function (param) {
                                    return [
                                            partial_arg,
                                            param
                                          ];
                                  };
                                }), param);
                  };
                }), param);
  };
}

function choice(param) {
  if (!param) {
    return mzero;
  }
  var h = param.hd;
  var partial_arg = choice(param.tl);
  return function (param) {
    return $less$pipe$great(h, partial_arg, param);
  };
}

function count(n, x) {
  if (n > 0) {
    return $less$tilde$great(x, count(n - 1 | 0, x));
  } else {
    return function (param) {
      return [
              /* [] */0,
              param
            ];
    };
  }
}

function between(op, ed, x) {
  return $less$less((function (param) {
                return $great$great$eq(op, (function (param) {
                              return x;
                            }), param);
              }), ed);
}

function option($$default, x) {
  return function (param) {
    return $less$pipe$great(x, (function (param) {
                  return [
                          $$default,
                          param
                        ];
                }), param);
  };
}

function optional(x) {
  var y = function (param) {
    return [
            undefined,
            param
          ];
  };
  var x$1 = function (param) {
    return $great$great$eq(x, (function (param) {
                  return y;
                }), param);
  };
  return function (param) {
    return $less$pipe$great(x$1, (function (param) {
                  return [
                          undefined,
                          param
                        ];
                }), param);
  };
}

function skip_many(x) {
  var x$1 = function (param) {
    return $great$great$eq(x, (function (param) {
                  return skip_many(x);
                }), param);
  };
  return function (param) {
    return $less$pipe$great(x$1, (function (param) {
                  return [
                          undefined,
                          param
                        ];
                }), param);
  };
}

function skip_many1(x) {
  var y = skip_many(x);
  return function (param) {
    return $great$great$eq(x, (function (param) {
                  return y;
                }), param);
  };
}

function many(x) {
  var x$1 = function (param) {
    return $great$great$eq(x, (function (r) {
                  var partial_arg = many(x);
                  return function (param) {
                    return $great$great$eq(partial_arg, (function (rs) {
                                  var partial_arg = {
                                    hd: r,
                                    tl: rs
                                  };
                                  return function (param) {
                                    return [
                                            partial_arg,
                                            param
                                          ];
                                  };
                                }), param);
                  };
                }), param);
  };
  return function (param) {
    return $less$pipe$great(x$1, (function (param) {
                  return [
                          /* [] */0,
                          param
                        ];
                }), param);
  };
}

function many1(x) {
  return $less$tilde$great(x, many(x));
}

function sep_by1(x, sep) {
  return $less$tilde$great(x, many(function (param) {
                  return $great$great$eq(sep, (function (param) {
                                return x;
                              }), param);
                }));
}

function sep_by(x, sep) {
  var partial_arg = sep_by1(x, sep);
  return function (param) {
    return $less$pipe$great(partial_arg, (function (param) {
                  return [
                          /* [] */0,
                          param
                        ];
                }), param);
  };
}

function end_by1(x, sep) {
  return $less$less(sep_by1(x, sep), sep);
}

function end_by(x, sep) {
  var partial_arg = end_by1(x, sep);
  return function (param) {
    return $less$pipe$great(partial_arg, (function (param) {
                  return [
                          /* [] */0,
                          param
                        ];
                }), param);
  };
}

function chainl1(x, op) {
  var loop = function (a) {
    return function (param) {
      return $less$pipe$great((function (param) {
                    return $great$great$eq(op, (function (f) {
                                  return function (param) {
                                    return $great$great$eq(x, (function (b) {
                                                  return loop(Curry._2(f, a, b));
                                                }), param);
                                  };
                                }), param);
                  }), (function (param) {
                    return [
                            a,
                            param
                          ];
                  }), param);
    };
  };
  return function (param) {
    return $great$great$eq(x, loop, param);
  };
}

function chainl(x, op, $$default) {
  var partial_arg = chainl1(x, op);
  return function (param) {
    return $less$pipe$great(partial_arg, (function (param) {
                  return [
                          $$default,
                          param
                        ];
                }), param);
  };
}

function chainr1(x, op) {
  return function (param) {
    return $great$great$eq(x, (function (a) {
                  return function (param) {
                    return $less$pipe$great((function (param) {
                                  return $great$great$eq(op, (function (f) {
                                                return $eq$great(chainr1(x, op), Curry._1(f, a));
                                              }), param);
                                }), (function (param) {
                                  return [
                                          a,
                                          param
                                        ];
                                }), param);
                  };
                }), param);
  };
}

function chainr(x, op, $$default) {
  var partial_arg = chainr1(x, op);
  return function (param) {
    return $less$pipe$great(partial_arg, (function (param) {
                  return [
                          $$default,
                          param
                        ];
                }), param);
  };
}

function exactly(x) {
  return satisfy(function (param) {
              return Caml_obj.caml_equal(x, param);
            });
}

function one_of(l) {
  return satisfy(function (x) {
              return List.mem(x, l);
            });
}

function none_of(l) {
  return satisfy(function (x) {
              return !List.mem(x, l);
            });
}

function range(l, r) {
  return satisfy(function (x) {
              if (Caml_obj.caml_lessequal(l, x)) {
                return Caml_obj.caml_lessequal(x, r);
              } else {
                return false;
              }
            });
}

var space = satisfy(function (x) {
      return List.mem(x, {
                  hd: /* ' ' */32,
                  tl: {
                    hd: /* '\t' */9,
                    tl: {
                      hd: /* '\r' */13,
                      tl: {
                        hd: /* '\n' */10,
                        tl: /* [] */0
                      }
                    }
                  }
                });
    });

var spaces = skip_many(space);

var newline = satisfy(function (param) {
      return Caml_obj.caml_equal(/* '\n' */10, param);
    });

var tab = satisfy(function (param) {
      return Caml_obj.caml_equal(/* '\t' */9, param);
    });

var upper = range(/* 'A' */65, /* 'Z' */90);

var lower = range(/* 'a' */97, /* 'z' */122);

var digit = range(/* '0' */48, /* '9' */57);

function letter(param) {
  return $less$pipe$great(lower, upper, param);
}

function alpha_num(param) {
  return $less$pipe$great(letter, digit, param);
}

var partial_arg = range(/* 'A' */65, /* 'F' */70);

var partial_arg$1 = range(/* 'a' */97, /* 'f' */102);

function partial_arg$2(param) {
  return $less$pipe$great(partial_arg$1, partial_arg, param);
}

function hex_digit(param) {
  return $less$pipe$great(partial_arg$2, digit, param);
}

var oct_digit = range(/* '0' */48, /* '7' */55);

function lexeme(x) {
  return function (param) {
    return $great$great$eq(spaces, (function (param) {
                  return x;
                }), param);
  };
}

function token(s) {
  var loop = function (s, i) {
    if (i >= s.length) {
      return function (param) {
        return [
                s,
                param
              ];
      };
    }
    var y = loop(s, i + 1 | 0);
    var x = Caml_string.get(s, i);
    var x$1 = satisfy(function (param) {
          return Caml_obj.caml_equal(x, param);
        });
    return function (param) {
      return $great$great$eq(x$1, (function (param) {
                    return y;
                  }), param);
    };
  };
  var y = loop(s, 0);
  return function (param) {
    return $great$great$eq(spaces, (function (param) {
                  return y;
                }), param);
  };
}

export {
  LazyStream ,
  implode ,
  explode ,
  $percent ,
  parse ,
  $$return ,
  $great$great$eq ,
  $less$pipe$great ,
  scan ,
  mzero ,
  any ,
  satisfy ,
  eof ,
  $eq$great ,
  $less$less ,
  $great$great ,
  $less$tilde$great ,
  choice ,
  count ,
  between ,
  option ,
  optional ,
  skip_many1 ,
  skip_many ,
  many1 ,
  many ,
  sep_by1 ,
  sep_by ,
  end_by1 ,
  end_by ,
  chainl1 ,
  chainl ,
  chainr1 ,
  chainr ,
  exactly ,
  one_of ,
  none_of ,
  range ,
  space ,
  spaces ,
  newline ,
  tab ,
  upper ,
  lower ,
  digit ,
  letter ,
  alpha_num ,
  hex_digit ,
  oct_digit ,
  lexeme ,
  token ,
  
}
/* space Not a pure module */

// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Opal from "./vendor/opal/opal.mjs";
import * as Curry from "@rescript/std/lib/es6/curry.js";
import * as Belt_Int from "@rescript/std/lib/es6/belt_Int.js";
import * as Belt_List from "@rescript/std/lib/es6/belt_List.js";
import * as Belt_Array from "@rescript/std/lib/es6/belt_Array.js";
import * as Pervasives from "@rescript/std/lib/es6/pervasives.js";
import * as Belt_Option from "@rescript/std/lib/es6/belt_Option.js";

var ast_to_array = Belt_List.toArray;

function item_from_tag(children, tag) {
  var tag_name = tag.name.toLowerCase();
  var tag_value = tag.value;
  var tag_attrib = tag.attrib;
  var tag$1 = {
    name: tag_name,
    value: tag_value,
    attrib: tag_attrib
  };
  switch (tag_name) {
    case "b" :
        if (tag_value !== undefined || tag_attrib.length !== 0) {
          return {
                  TAG: /* Other */23,
                  children: children,
                  tag: tag$1
                };
        } else {
          return {
                  TAG: /* Bold */1,
                  children: children
                };
        }
    case "center" :
        if (tag_value !== undefined || tag_attrib.length !== 0) {
          return {
                  TAG: /* Other */23,
                  children: children,
                  tag: tag$1
                };
        } else {
          return {
                  TAG: /* CenterAlign */7,
                  children: children
                };
        }
    case "code" :
        var language = tag_value;
        if (language !== undefined) {
          if (tag_attrib.length !== 0) {
            return {
                    TAG: /* Other */23,
                    children: children,
                    tag: tag$1
                  };
          } else {
            return {
                    TAG: /* CodeLanguageSpecific */20,
                    children: children,
                    language: language
                  };
          }
        } else if (tag_attrib.length !== 0) {
          return {
                  TAG: /* Other */23,
                  children: children,
                  tag: tag$1
                };
        } else {
          return {
                  TAG: /* Code */19,
                  children: children
                };
        }
    case "color" :
        var color = tag_value;
        if (color !== undefined && tag_attrib.length === 0) {
          return {
                  TAG: /* FontColor */6,
                  children: children,
                  color: color
                };
        } else {
          return {
                  TAG: /* Other */23,
                  children: children,
                  tag: tag$1
                };
        }
    case "i" :
        if (tag_value !== undefined || tag_attrib.length !== 0) {
          return {
                  TAG: /* Other */23,
                  children: children,
                  tag: tag$1
                };
        } else {
          return {
                  TAG: /* Italic */2,
                  children: children
                };
        }
    case "img" :
        if (tag_value !== undefined) {
          return {
                  TAG: /* Other */23,
                  children: children,
                  tag: tag$1
                };
        }
        var match = tag_attrib;
        var len = match.length;
        if (len >= 3) {
          return {
                  TAG: /* Other */23,
                  children: children,
                  tag: tag$1
                };
        }
        switch (len) {
          case 0 :
              if (!children) {
                return Pervasives.failwith("Text must be inside img");
              }
              var url = children.hd;
              if (url.TAG === /* Text */0 && !children.tl) {
                return {
                        TAG: /* Image */16,
                        url: url._0
                      };
              } else {
                return Pervasives.failwith("Text must be inside img");
              }
          case 1 :
              return {
                      TAG: /* Other */23,
                      children: children,
                      tag: tag$1
                    };
          case 2 :
              var match$1 = match[0];
              if (match$1[0] !== "width") {
                return {
                        TAG: /* Other */23,
                        children: children,
                        tag: tag$1
                      };
              }
              var match$2 = match[1];
              if (match$2[0] !== "height") {
                return {
                        TAG: /* Other */23,
                        children: children,
                        tag: tag$1
                      };
              }
              if (!children) {
                return Pervasives.failwith("Text must be inside img");
              }
              var url$1 = children.hd;
              if (url$1.TAG === /* Text */0 && !children.tl) {
                return {
                        TAG: /* ImageResized */17,
                        width: Belt_Option.getExn(Belt_Int.fromString(match$1[1])),
                        height: Belt_Option.getExn(Belt_Int.fromString(match$2[1])),
                        url: url$1._0
                      };
              } else {
                return Pervasives.failwith("Text must be inside img");
              }
          
        }
    case "left" :
        if (tag_value !== undefined || tag_attrib.length !== 0) {
          return {
                  TAG: /* Other */23,
                  children: children,
                  tag: tag$1
                };
        } else {
          return {
                  TAG: /* LeftAlign */8,
                  children: children
                };
        }
    case "pre" :
        if (tag_value !== undefined || tag_attrib.length !== 0) {
          return {
                  TAG: /* Other */23,
                  children: children,
                  tag: tag$1
                };
        } else {
          return {
                  TAG: /* Preformatted */21,
                  children: children
                };
        }
    case "quote" :
        var name = tag_value;
        if (name !== undefined) {
          if (tag_attrib.length !== 0) {
            return {
                    TAG: /* Other */23,
                    children: children,
                    tag: tag$1
                  };
          } else {
            return {
                    TAG: /* QuoteNamed */11,
                    children: children,
                    quote: name
                  };
          }
        } else if (tag_attrib.length !== 0) {
          return {
                  TAG: /* Other */23,
                  children: children,
                  tag: tag$1
                };
        } else {
          return {
                  TAG: /* Quote */10,
                  children: children
                };
        }
    case "right" :
        if (tag_value !== undefined || tag_attrib.length !== 0) {
          return {
                  TAG: /* Other */23,
                  children: children,
                  tag: tag$1
                };
        } else {
          return {
                  TAG: /* RightAlign */9,
                  children: children
                };
        }
    case "s" :
        if (tag_value !== undefined || tag_attrib.length !== 0) {
          return {
                  TAG: /* Other */23,
                  children: children,
                  tag: tag$1
                };
        } else {
          return {
                  TAG: /* Strikethrough */4,
                  children: children
                };
        }
    case "size" :
        var number = tag_value;
        if (number !== undefined && tag_attrib.length === 0) {
          return {
                  TAG: /* FontSize */5,
                  children: children,
                  size: Belt_Option.getExn(Belt_Int.fromString(number))
                };
        } else {
          return {
                  TAG: /* Other */23,
                  children: children,
                  tag: tag$1
                };
        }
    case "spoiler" :
        var name$1 = tag_value;
        if (name$1 !== undefined) {
          if (tag_attrib.length !== 0) {
            return {
                    TAG: /* Other */23,
                    children: children,
                    tag: tag$1
                  };
          } else {
            return {
                    TAG: /* SpoilerNamed */13,
                    children: children,
                    name: name$1
                  };
          }
        } else if (tag_attrib.length !== 0) {
          return {
                  TAG: /* Other */23,
                  children: children,
                  tag: tag$1
                };
        } else {
          return {
                  TAG: /* Spoiler */12,
                  children: children
                };
        }
    case "style" :
        if (tag_value !== undefined) {
          return {
                  TAG: /* Other */23,
                  children: children,
                  tag: tag$1
                };
        }
        var match$3 = tag_attrib;
        if (match$3.length !== 1) {
          return {
                  TAG: /* Other */23,
                  children: children,
                  tag: tag$1
                };
        }
        var match$4 = match$3[0];
        switch (match$4[0]) {
          case "color" :
              return {
                      TAG: /* FontColor */6,
                      children: children,
                      color: match$4[1]
                    };
          case "size" :
              return {
                      TAG: /* FontSize */5,
                      children: children,
                      size: Belt_Option.getExn(Belt_Int.fromString(match$4[1]))
                    };
          default:
            return {
                    TAG: /* Other */23,
                    children: children,
                    tag: tag$1
                  };
        }
    case "table" :
        if (tag_value !== undefined || tag_attrib.length !== 0) {
          return {
                  TAG: /* Other */23,
                  children: children,
                  tag: tag$1
                };
        } else {
          return {
                  TAG: /* Table */22,
                  rows: Belt_List.toArray(Belt_List.map(children, (function (param) {
                              if (param.TAG !== /* Other */23) {
                                return Pervasives.failwith("Table row must be inside table");
                              }
                              var match = param.tag;
                              if (match.name === "tr" && !(match.value !== undefined || match.attrib.length !== 0)) {
                                return /* TableRow */{
                                        cells: Belt_List.toArray(Belt_List.map(param.children, (function (param) {
                                                    if (param.TAG !== /* Other */23) {
                                                      return Pervasives.failwith("Table cell must be inside row");
                                                    }
                                                    var match = param.tag;
                                                    var children = param.children;
                                                    switch (match.name) {
                                                      case "td" :
                                                          if (match.value !== undefined || match.attrib.length !== 0) {
                                                            return Pervasives.failwith("Table cell must be inside row");
                                                          } else {
                                                            return /* TableCell */{
                                                                    children: children,
                                                                    variant: "Content"
                                                                  };
                                                          }
                                                      case "th" :
                                                          if (match.value !== undefined || match.attrib.length !== 0) {
                                                            return Pervasives.failwith("Table cell must be inside row");
                                                          } else {
                                                            return /* TableCell */{
                                                                    children: children,
                                                                    variant: "Heading"
                                                                  };
                                                          }
                                                      default:
                                                        return Pervasives.failwith("Table cell must be inside row");
                                                    }
                                                  })))
                                      };
                              } else {
                                return Pervasives.failwith("Table row must be inside table");
                              }
                            })))
                };
        }
    case "u" :
        if (tag_value !== undefined || tag_attrib.length !== 0) {
          return {
                  TAG: /* Other */23,
                  children: children,
                  tag: tag$1
                };
        } else {
          return {
                  TAG: /* Underline */3,
                  children: children
                };
        }
    case "list" :
    case "ol" :
    case "ul" :
        break;
    case "url" :
        var url$2 = tag_value;
        if (url$2 !== undefined) {
          if (tag_attrib.length !== 0) {
            return {
                    TAG: /* Other */23,
                    children: children,
                    tag: tag$1
                  };
          } else {
            return {
                    TAG: /* LinkNamed */15,
                    children: children,
                    url: url$2
                  };
          }
        }
        if (tag_attrib.length !== 0) {
          return {
                  TAG: /* Other */23,
                  children: children,
                  tag: tag$1
                };
        }
        if (!children) {
          return Pervasives.failwith("Text must be inside url");
        }
        var url$3 = children.hd;
        if (url$3.TAG === /* Text */0 && !children.tl) {
          return {
                  TAG: /* Link */14,
                  url: url$3._0
                };
        } else {
          return Pervasives.failwith("Text must be inside url");
        }
    default:
      return {
              TAG: /* Other */23,
              children: children,
              tag: tag$1
            };
  }
  if (tag_value !== undefined) {
    return {
            TAG: /* Other */23,
            children: children,
            tag: tag$1
          };
  }
  if (tag_attrib.length !== 0) {
    return {
            TAG: /* Other */23,
            children: children,
            tag: tag$1
          };
  }
  var match$5 = tag.name;
  var tmp;
  switch (match$5) {
    case "list" :
        tmp = "Another";
        break;
    case "ol" :
        tmp = "Ordered";
        break;
    case "ul" :
        tmp = "Unordered";
        break;
    default:
      tmp = "Another";
  }
  return {
          TAG: /* List */18,
          items: Belt_List.toArray(Belt_List.map(children, (function (li) {
                      if (li.TAG !== /* Other */23) {
                        return Pervasives.failwith("List item must be inside list");
                      }
                      var match = li.tag;
                      if (match.name === "li" && !(match.value !== undefined || match.attrib.length !== 0)) {
                        return /* ListItem */{
                                children: li.children
                              };
                      } else {
                        return Pervasives.failwith("List item must be inside list");
                      }
                    }))),
          variant: tmp
        };
}

function traverse(f, ast) {
  return Belt_List.map(ast, (function (txt) {
                switch (txt.TAG | 0) {
                  case /* Text */0 :
                      return {
                              TAG: /* Text */0,
                              _0: txt._0
                            };
                  case /* Bold */1 :
                      return {
                              TAG: /* Bold */1,
                              children: traverse(f, Curry._1(f, txt.children))
                            };
                  case /* Italic */2 :
                      return {
                              TAG: /* Italic */2,
                              children: traverse(f, Curry._1(f, txt.children))
                            };
                  case /* Underline */3 :
                      return {
                              TAG: /* Underline */3,
                              children: traverse(f, Curry._1(f, txt.children))
                            };
                  case /* Strikethrough */4 :
                      return {
                              TAG: /* Strikethrough */4,
                              children: traverse(f, Curry._1(f, txt.children))
                            };
                  case /* FontSize */5 :
                      return {
                              TAG: /* FontSize */5,
                              children: traverse(f, Curry._1(f, txt.children)),
                              size: txt.size
                            };
                  case /* FontColor */6 :
                      return {
                              TAG: /* FontColor */6,
                              children: traverse(f, Curry._1(f, txt.children)),
                              color: txt.color
                            };
                  case /* CenterAlign */7 :
                      return {
                              TAG: /* CenterAlign */7,
                              children: traverse(f, Curry._1(f, txt.children))
                            };
                  case /* LeftAlign */8 :
                      return {
                              TAG: /* LeftAlign */8,
                              children: traverse(f, Curry._1(f, txt.children))
                            };
                  case /* RightAlign */9 :
                      return {
                              TAG: /* RightAlign */9,
                              children: traverse(f, Curry._1(f, txt.children))
                            };
                  case /* Quote */10 :
                      return {
                              TAG: /* Quote */10,
                              children: traverse(f, Curry._1(f, txt.children))
                            };
                  case /* QuoteNamed */11 :
                      return {
                              TAG: /* QuoteNamed */11,
                              children: traverse(f, Curry._1(f, txt.children)),
                              quote: txt.quote
                            };
                  case /* Spoiler */12 :
                      return {
                              TAG: /* Spoiler */12,
                              children: traverse(f, Curry._1(f, txt.children))
                            };
                  case /* SpoilerNamed */13 :
                      return {
                              TAG: /* SpoilerNamed */13,
                              children: traverse(f, Curry._1(f, txt.children)),
                              name: txt.name
                            };
                  case /* Link */14 :
                      return {
                              TAG: /* Link */14,
                              url: txt.url
                            };
                  case /* LinkNamed */15 :
                      return {
                              TAG: /* LinkNamed */15,
                              children: traverse(f, Curry._1(f, txt.children)),
                              url: txt.url
                            };
                  case /* Image */16 :
                      return {
                              TAG: /* Image */16,
                              url: txt.url
                            };
                  case /* ImageResized */17 :
                      return {
                              TAG: /* ImageResized */17,
                              width: txt.width,
                              height: txt.height,
                              url: txt.url
                            };
                  case /* List */18 :
                      return {
                              TAG: /* List */18,
                              items: Belt_Array.map(txt.items, (function (param) {
                                      return /* ListItem */{
                                              children: traverse(f, Curry._1(f, param.children))
                                            };
                                    })),
                              variant: txt.variant
                            };
                  case /* Code */19 :
                      return {
                              TAG: /* Code */19,
                              children: traverse(f, Curry._1(f, txt.children))
                            };
                  case /* CodeLanguageSpecific */20 :
                      return {
                              TAG: /* CodeLanguageSpecific */20,
                              children: traverse(f, Curry._1(f, txt.children)),
                              language: txt.language
                            };
                  case /* Preformatted */21 :
                      return {
                              TAG: /* Preformatted */21,
                              children: traverse(f, Curry._1(f, txt.children))
                            };
                  case /* Table */22 :
                      var rows = Belt_Array.map(txt.rows, (function (param) {
                              return /* TableRow */{
                                      cells: Belt_Array.map(param.cells, (function (param) {
                                              return /* TableCell */{
                                                      children: traverse(f, Curry._1(f, param.children)),
                                                      variant: param.variant
                                                    };
                                            }))
                                    };
                            }));
                      return {
                              TAG: /* Table */22,
                              rows: rows
                            };
                  case /* Other */23 :
                      var match = txt.tag;
                      return {
                              TAG: /* Other */23,
                              children: traverse(f, Curry._1(f, txt.children)),
                              tag: {
                                name: match.name,
                                value: match.value,
                                attrib: match.attrib
                              }
                            };
                  case /* YouTube */24 :
                      return {
                              TAG: /* YouTube */24,
                              id: txt.id
                            };
                  
                }
              }));
}

function fix_ast(ast) {
  return Belt_List.reverse(Belt_List.reduce(/* [] */0, ast, (function (state, el) {
                    if (!state) {
                      return {
                              hd: el,
                              tl: state
                            };
                    }
                    var t1 = state.hd;
                    if (t1.TAG === /* Text */0 && el.TAG === /* Text */0) {
                      return {
                              hd: {
                                TAG: /* Text */0,
                                _0: t1._0 + el._0
                              },
                              tl: state.tl
                            };
                    } else {
                      return {
                              hd: el,
                              tl: state
                            };
                    }
                  })));
}

function many$p(c, x) {
  if (c !== -1) {
    return Opal.option(/* [] */0, (function (param) {
                  return Opal.$great$great$eq(x, (function (r) {
                                var partial_arg = many$p(c - 1 | 0, x);
                                return function (param) {
                                  return Opal.$great$great$eq(partial_arg, (function (rs) {
                                                var partial_arg = {
                                                  hd: r,
                                                  tl: rs
                                                };
                                                return function (param) {
                                                  return Opal.$$return(partial_arg, param);
                                                };
                                              }), param);
                                };
                              }), param);
                }));
  } else {
    return Opal.mzero;
  }
}

function many1$p(c, x) {
  return Opal.$less$tilde$great(x, many$p(c - 1 | 0, x));
}

var rsb = Opal.exactly(/* ']' */93);

var lsb = Opal.exactly(/* '[' */91);

var eql = Opal.exactly(/* '=' */61);

var slash = Opal.exactly(/* '/' */47);

var attr_value = Opal.$eq$great(many1$p(200, Opal.none_of({
              hd: /* ' ' */32,
              tl: {
                hd: /* '\t' */9,
                tl: {
                  hd: /* '\r' */13,
                  tl: {
                    hd: /* '\n' */10,
                    tl: {
                      hd: /* ']' */93,
                      tl: {
                        hd: /* '[' */91,
                        tl: /* [] */0
                      }
                    }
                  }
                }
              }
            })), Opal.implode);

var partial_arg = Opal.$eq$great(many1$p(50, (function (param) {
            return Opal.$less$pipe$great(Opal.letter, Opal.digit, param);
          })), Opal.implode);

function attrib(param) {
  return Opal.$great$great$eq(partial_arg, (function (attr_name) {
                var partial_arg = Opal.$great$great(eql, attr_value);
                return function (param) {
                  return Opal.$great$great$eq(partial_arg, (function (attr_value) {
                                var partial_arg = [
                                  attr_name,
                                  attr_value
                                ];
                                return function (param) {
                                  return Opal.$$return(partial_arg, param);
                                };
                              }), param);
                };
              }), param);
}

var attributes = Opal.$great$great(Opal.spaces, many$p(10, Opal.$less$less(attrib, Opal.spaces)));

var partial_arg$1 = Opal.$eq$great(Opal.$great$great(lsb, many1$p(50, Opal.letter)), Opal.implode);

var tag = Opal.$eq$great(Opal.$less$less((function (param) {
            return Opal.$great$great$eq(partial_arg$1, (function (name) {
                          var partial_arg = Opal.$eq$great(Opal.$great$great(eql, attr_value), (function (it) {
                                  return it;
                                }));
                          var partial_arg$1 = function (param) {
                            return Opal.$less$pipe$great(partial_arg, (function (param) {
                                          return Opal.$$return(undefined, param);
                                        }), param);
                          };
                          var partial_arg$2 = function (param) {
                            return Opal.$great$great$eq(partial_arg$1, (function (value) {
                                          return Opal.$eq$great(attributes, (function (attrib) {
                                                        return [
                                                                value,
                                                                attrib
                                                              ];
                                                      }));
                                        }), param);
                          };
                          return function (param) {
                            return Opal.$great$great$eq(partial_arg$2, (function (param) {
                                          var partial_arg_1 = param[0];
                                          var partial_arg_2 = Belt_List.toArray(param[1]);
                                          var partial_arg = [
                                            name,
                                            partial_arg_1,
                                            partial_arg_2
                                          ];
                                          return function (param) {
                                            return Opal.$$return(partial_arg, param);
                                          };
                                        }), param);
                          };
                        }), param);
          }), rsb), (function (param) {
        return {
                name: param[0],
                value: param[1],
                attrib: param[2]
              };
      }));

var closedtag = Opal.$less$less(Opal.$great$great(lsb, Opal.$great$great(slash, Opal.$eq$great(Opal.many1(Opal.letter), Opal.implode))), rsb);

var text_parser = Opal.$eq$great(Opal.$eq$great(many1$p(10, Opal.none_of({
                  hd: /* '[' */91,
                  tl: /* [] */0
                })), Opal.implode), (function (it) {
        return {
                TAG: /* Text */0,
                _0: it
              };
      }));

var lsb_text = Opal.$eq$great(Opal.$eq$great(lsb, (function (param) {
            return "[";
          })), (function (it) {
        return {
                TAG: /* Text */0,
                _0: it
              };
      }));

function bbcode_parser(param) {
  return function (param) {
    return Opal.$great$great$eq((function (param) {
                  return Opal.$great$great$eq((function (param) {
                                return Opal.$great$great$eq(tag, (function (tg) {
                                              var partial_arg = ast_parser(true);
                                              return function (param) {
                                                return Opal.$great$great$eq(partial_arg, (function (it) {
                                                              var partial_arg = [
                                                                tg,
                                                                it
                                                              ];
                                                              return function (param) {
                                                                return Opal.$$return(partial_arg, param);
                                                              };
                                                            }), param);
                                              };
                                            }), param);
                              }), (function (param) {
                                var ai = param[1];
                                var tg = param[0];
                                return function (param) {
                                  return Opal.$great$great$eq(closedtag, (function (ctg) {
                                                var partial_arg = [
                                                  tg,
                                                  ctg,
                                                  ai
                                                ];
                                                return function (param) {
                                                  return Opal.$$return(partial_arg, param);
                                                };
                                              }), param);
                                };
                              }), param);
                }), (function (param) {
                  var tg = param[0];
                  if (tg.name !== param[1]) {
                    return Opal.mzero;
                  }
                  var partial_arg = item_from_tag(param[2], tg);
                  return function (param) {
                    return Opal.$$return(partial_arg, param);
                  };
                }), param);
  };
}

function ast_parser(is_open) {
  var partial_arg = is_open ? (function (param) {
        return Opal.$great$great$eq(closedtag, (function (param) {
                      return Opal.mzero;
                    }), param);
      }) : lsb_text;
  var partial_arg$1 = bbcode_parser(undefined);
  var partial_arg$2 = function (param) {
    return Opal.$less$pipe$great(text_parser, partial_arg$1, param);
  };
  return Opal.many(function (param) {
              return Opal.$less$pipe$great(partial_arg$2, partial_arg, param);
            });
}

function run(str, parser) {
  return Opal.parse(parser, Opal.LazyStream.of_string(str));
}

var Parse = {
  many$p: many$p,
  many1$p: many1$p,
  rsb: rsb,
  lsb: lsb,
  eql: eql,
  slash: slash,
  attr_value: attr_value,
  attrib: attrib,
  attributes: attributes,
  tag: tag,
  closedtag: closedtag,
  text_parser: text_parser,
  lsb_text: lsb_text,
  bbcode_parser: bbcode_parser,
  ast_parser: ast_parser,
  run: run
};

function parse(text) {
  return Belt_Option.map(run(text, ast_parser(false)), (function (param) {
                return traverse(fix_ast, param);
              }));
}

export {
  ast_to_array ,
  item_from_tag ,
  traverse ,
  fix_ast ,
  Parse ,
  parse ,
  
}
/* rsb Not a pure module */

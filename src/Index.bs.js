// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Belt_List from "rescript/lib/es6/belt_List.js";
import * as Belt_Array from "rescript/lib/es6/belt_Array.js";

function a(param) {
  console.log("hello");
  
}

console.log("hello");

function lexing(s) {
  return Belt_Array.reduce(Array.from(s), /* [] */0, (function (st, el) {
                switch (el) {
                  case "[" :
                      return {
                              hd: /* LLeftBracket */0,
                              tl: st
                            };
                  case "]" :
                      return {
                              hd: /* LRightBracket */1,
                              tl: st
                            };
                  default:
                    if (!st) {
                      return {
                              hd: /* LText */{
                                text: el
                              },
                              tl: /* [] */0
                            };
                    }
                    var match = st.hd;
                    if (typeof match === "number") {
                      return {
                              hd: /* LText */{
                                text: el
                              },
                              tl: st
                            };
                    } else {
                      return {
                              hd: /* LText */{
                                text: match.text + el
                              },
                              tl: st.tl
                            };
                    }
                }
              }));
}

console.log(Belt_Array.reverse(Belt_List.toArray(lexing("rstar[atrsaon[url]aorsinit[/url][]]rasta"))));

function parsing_weak(_l, _state, acc) {
  while(true) {
    var state = _state;
    var l = _l;
    if (l) {
      var match = l.hd;
      if (typeof match === "number") {
        if (match !== 0) {
          if (state.TAG === /* OpenBracket */0) {
            throw {
                  RE_EXN_ID: "Assert_failure",
                  _1: [
                    "Index.res",
                    51,
                    56
                  ],
                  Error: new Error()
                };
          }
          throw {
                RE_EXN_ID: "Assert_failure",
                _1: [
                  "Index.res",
                  52,
                  59
                ],
                Error: new Error()
              };
        }
        var nxt = l.tl;
        if (state.TAG === /* OpenBracket */0) {
          _state = {
            TAG: /* OpenBracket */0,
            _0: state._0 + "["
          };
          _l = nxt;
          continue ;
        }
        _state = {
          TAG: /* OpenBracket */0,
          _0: state._0 + "["
        };
        _l = nxt;
        continue ;
      }
      var nxt$1 = l.tl;
      var text = match.text;
      if (state.TAG === /* OpenBracket */0) {
        _state = {
          TAG: /* OpenBracket */0,
          _0: state._0 + text
        };
        _l = nxt$1;
        continue ;
      }
      _state = {
        TAG: /* NotOpenBracket */1,
        _0: state._0 + text
      };
      _l = nxt$1;
      continue ;
    }
    if (state.TAG === /* OpenBracket */0) {
      throw {
            RE_EXN_ID: "Assert_failure",
            _1: [
              "Index.res",
              53,
              35
            ],
            Error: new Error()
          };
    }
    throw {
          RE_EXN_ID: "Assert_failure",
          _1: [
            "Index.res",
            54,
            38
          ],
          Error: new Error()
        };
  };
}

var mapBBaux = Belt_List.map;

function mapBB(a, f) {
  return Belt_Array.reverse(Belt_List.toArray(Belt_List.map(Belt_List.fromArray(a), f)));
}

export {
  a ,
  lexing ,
  parsing_weak ,
  mapBBaux ,
  mapBB ,
  
}
/*  Not a pure module */

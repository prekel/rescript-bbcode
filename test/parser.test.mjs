// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Zora from "zora";
import * as BBCode from "../src/BBCode.mjs";

Zora.test("Parse 1", (function (t) {
        var a = BBCode.Parse.run("[tag]ars[b]art[/b][/tag]", BBCode.Parse.pqwf(undefined, /* [] */0));
        var e_0 = {
          TAG: /* Other */23,
          children: {
            hd: {
              TAG: /* Text */0,
              _0: "ars"
            },
            tl: {
              hd: {
                TAG: /* Bold */1,
                children: {
                  hd: {
                    TAG: /* Text */0,
                    _0: "art"
                  },
                  tl: /* [] */0
                }
              },
              tl: /* [] */0
            }
          },
          tag: {
            name: "tag",
            value: undefined,
            attrib: []
          }
        };
        var e = {
          hd: e_0,
          tl: /* [] */0
        };
        t.equal(a, e, "pqwf");
        
      }));

Zora.test("Parse tag [tag=val]", (function (t) {
        var a = BBCode.Parse.run("[tag=val]", BBCode.Parse.tag);
        var e_value = "val";
        var e_attrib = [];
        var e = {
          name: "tag",
          value: e_value,
          attrib: e_attrib
        };
        t.equal(a, e, "tag");
        
      }));

Zora.test("Parse tag [tag]", (function (t) {
        var a = BBCode.Parse.run("[tag]", BBCode.Parse.tag);
        var e_attrib = [];
        var e = {
          name: "tag",
          value: undefined,
          attrib: e_attrib
        };
        t.equal(a, e, "tag");
        
      }));

Zora.test("Parse tag [tag=val attr=attrval1 attr2=attrval2]", (function (t) {
        var a = BBCode.Parse.run("[tag=val attr=attrval1 attr2=attrval2]", BBCode.Parse.tag);
        var e_value = "val";
        var e_attrib = [
          [
            "attr",
            "attrval1"
          ],
          [
            "attr2",
            "attrval2"
          ]
        ];
        var e = {
          name: "tag",
          value: e_value,
          attrib: e_attrib
        };
        t.equal(a, e, "tag");
        
      }));

Zora.test("Parse tag subparsers", (function (t) {
        var a = BBCode.Parse.run("tag", BBCode.Parse.attr_value);
        t.equal(a, "tag", "attr_value");
        var a$1 = BBCode.Parse.run("tag=tag1", BBCode.Parse.attrib);
        t.equal(a$1, [
              "tag",
              "tag1"
            ], "attrib");
        var a$2 = BBCode.Parse.run("tag=tag1 tag1=tag2", BBCode.Parse.attributes);
        t.equal(a$2, {
              hd: [
                "tag",
                "tag1"
              ],
              tl: {
                hd: [
                  "tag1",
                  "tag2"
                ],
                tl: /* [] */0
              }
            }, "attrib");
        
      }));

Zora.test("Parse big ", (function (t) {
        BBCode.parse("In near future science becomes dominant eroding ethic and moral values. Main character is a scientist conducting cloning experiments for an illegal company. Women from \"Valkure\" government special affairs agency storm this facility to put an end to this organization, but fall prey to set traps just as previous invaders. With such excellent new \"material\" experiments get much bolder.\n\n[From [url=https://vndbreview.blogspot.com/2020/08/vn-of-month-july-2008-kara-no-shoujo.html]vndbreview[/url]]");
        
      }));

Zora.test("Parse big ", (function (t) {
        BBCode.parse("In near future science becomes dominant eroding ethic and moral values. Main character is a scientist conducting cloning experiments for an illegal company. Women from \"Valkure\" government special affairs agency storm this facility to put an end to this organization, but fall prey to set traps just as previous invaders. With such excellent new \"material\" experiments get much bolder.\n\nFrom [url=https://vndbreview.blogspot.com/2020/08/vn-of-month-july-2008-kara-no-shoujo.html]vndbreview[/url]");
        
      }));

Zora.test("Parse [From ..", (function (t) {
        var a = BBCode.Parse.run("arsar [Frsato [url=https://example.com/]urlcontent[/url]", BBCode.Parse.ast_parer(false));
        console.log(JSON.stringify(a));
        t.equal(undefined, a, "");
        
      }));

Zora.test("Fix ast", (function (t) {
        var a = BBCode.Parse.fix_ast({
              hd: {
                TAG: /* Text */0,
                _0: "["
              },
              tl: {
                hd: {
                  TAG: /* Text */0,
                  _0: "qwf"
                },
                tl: /* [] */0
              }
            });
        t.equal(a, {
              hd: {
                TAG: /* Text */0,
                _0: "[qwf"
              },
              tl: /* [] */0
            }, "");
        
      }));

Zora.test("Test tag fails", (function (t) {
        var a = BBCode.Parse.run("[From asrtoa]", BBCode.Parse.tag);
        t.equal(a, undefined, "Should be none");
        var a$1 = BBCode.Parse.run("[Frsato [url=https://example.com/]urlcontent[/url]]", BBCode.Parse.tag);
        t.equal(a$1, undefined, "Should be none");
        var a$2 = BBCode.Parse.run("[url=https://example.com/]urlcontent[/url]", BBCode.Parse.tag);
        t.notEqual(a$2, undefined, "Should not be none");
        
      }));

Zora.test("Test parseone", (function (t) {
        var a1 = BBCode.Parse.run("arsar [Frsato [url=https://example.com/]urlcontent[/url]]", BBCode.Parse.parseone);
        t.equal(a1, {
              TAG: /* Text */0,
              _0: "arsar "
            }, "");
        var a2 = BBCode.Parse.run("[Frsato [url=https://example.com/]urlcontent[/url]]", BBCode.Parse.parseone);
        t.equal(a2, {
              TAG: /* Text */0,
              _0: "["
            }, "");
        var a3 = BBCode.Parse.run("Frsato [url=https://example.com/]urlcontent[/url]]", BBCode.Parse.parseone);
        t.equal(a3, {
              TAG: /* Text */0,
              _0: "Frsato "
            }, "");
        var a4 = BBCode.Parse.run("[url=https://example.com/]urlcontent[/url]]", BBCode.Parse.parseone);
        t.equal(a4, {
              TAG: /* LinkNamed */15,
              children: {
                hd: {
                  TAG: /* Text */0,
                  _0: "QQQ"
                },
                tl: /* [] */0
              },
              url: "https://example.com/"
            }, "");
        var a = BBCode.Parse.run("[url=https://example.com/]urlcontent[/url]", BBCode.Parse.bbcodeparsermock);
        t.equal(a, {
              TAG: /* LinkNamed */15,
              children: {
                hd: {
                  TAG: /* Text */0,
                  _0: "QQQ"
                },
                tl: /* [] */0
              },
              url: "https://example.com/"
            }, "");
        var a5 = BBCode.Parse.run("]", BBCode.Parse.parseone);
        t.equal(a5, {
              TAG: /* Text */0,
              _0: "]"
            }, "");
        
      }));

export {
  
}
/*  Not a pure module */
